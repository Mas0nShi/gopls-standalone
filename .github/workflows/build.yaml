name: Build and Release gopls

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Build and Release
    # 为每个矩阵组合选择合适的运行器
    runs-on: ${{ matrix.runner }}
    # 为 action-gh-release 提供创建 Release 的权限
    permissions:
      contents: write

    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
          - goos: windows
            goarch: amd64
            runner: windows-latest
          - goos: darwin
            goarch: amd64
            runner: macos-latest
          - goos: darwin
            goarch: arm64
            runner: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Set environment variables
        shell: bash
        run: |
          # 为 Windows 系统设置 .exe 后缀
          BINARY_NAME="gopls"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            BINARY_NAME="gopls.exe"
          fi
          echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV
          
          # 定义产物压缩包的名称
          ARTIFACT_FILENAME="gopls-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip"
          echo "ARTIFACT_FILENAME=${ARTIFACT_FILENAME}" >> $GITHUB_ENV

      - name: Build gopls
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # 创建一个临时目录，以确保 zip 包内的目录结构正确
          mkdir -p release/bin
          # 编译 gopls，-trimpath 和 -ldflags 用于优化二进制文件大小
          go build -o "release/bin/${{ env.BINARY_NAME }}" -trimpath -ldflags="-s -w" golang.org/x/tools/gopls@${{ github.ref_name }}

      - name: Package binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          # 进入 release 目录进行打包，以确保 zip 文件的根目录是 bin
          cd release
          zip -r ../${{ env.ARTIFACT_FILENAME }} bin
          cd ..

      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # 使用 PowerShell 的 Compress-Archive 命令进行打包
          Compress-Archive -Path release/bin -DestinationPath ${{ env.ARTIFACT_FILENAME }}

      - name: Release
        uses: softprops/action-gh-release@v2
        # 确保只在推送 tag 时执行
        if: startsWith(github.ref, 'refs/tags/')
        with:
          # 自动根据 commits 生成 Release Notes
          generate_release_notes: true
          # 上传当前矩阵任务构建的 zip 文件
          files: ${{ env.ARTIFACT_FILENAME }}
